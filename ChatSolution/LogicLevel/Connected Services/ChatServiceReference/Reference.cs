//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LogicLevel.ChatServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatServiceReference.IChatService", CallbackContract=typeof(LogicLevel.ChatServiceReference.IChatServiceCallback))]
    public interface IChatService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Login", ReplyAction="http://tempuri.org/IChatService/LoginResponse")]
        TransportLevel.ChatServiceReference.LoginResultTransportModel Login(TransportLevel.ChatServiceReference.LoginTransportModel obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Login", ReplyAction="http://tempuri.org/IChatService/LoginResponse")]
        System.Threading.Tasks.Task<TransportLevel.ChatServiceReference.LoginResultTransportModel> LoginAsync(TransportLevel.ChatServiceReference.LoginTransportModel obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Logout", ReplyAction="http://tempuri.org/IChatService/LogoutResponse")]
        void Logout(TransportLevel.ChatServiceReference.LogoutTransportModel obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Logout", ReplyAction="http://tempuri.org/IChatService/LogoutResponse")]
        System.Threading.Tasks.Task LogoutAsync(TransportLevel.ChatServiceReference.LogoutTransportModel obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Registration", ReplyAction="http://tempuri.org/IChatService/RegistrationResponse")]
        TransportLevel.ChatServiceReference.RegistrationResultTransportModel Registration(TransportLevel.ChatServiceReference.RegistrationTransportModel obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Registration", ReplyAction="http://tempuri.org/IChatService/RegistrationResponse")]
        System.Threading.Tasks.Task<TransportLevel.ChatServiceReference.RegistrationResultTransportModel> RegistrationAsync(TransportLevel.ChatServiceReference.RegistrationTransportModel obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SendMessage", ReplyAction="http://tempuri.org/IChatService/SendMessageResponse")]
        void SendMessage(TransportLevel.ChatServiceReference.MessagePartialTransportModel obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SendMessage", ReplyAction="http://tempuri.org/IChatService/SendMessageResponse")]
        System.Threading.Tasks.Task SendMessageAsync(TransportLevel.ChatServiceReference.MessagePartialTransportModel obj);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/UserJoined")]
        void UserJoined(TransportLevel.ChatServiceReference.UserPartialTransportModel obj);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/UserLeaved")]
        void UserLeaved(TransportLevel.ChatServiceReference.UserLeavedTransportModel obj);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/MessageReceived")]
        void MessageReceived(TransportLevel.ChatServiceReference.MessagePartialTransportModel obj);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/OnlineUsers")]
        void OnlineUsers(TransportLevel.ChatServiceReference.OnlineUsersTransportModel obj);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/CurrentUser")]
        void CurrentUser(TransportLevel.ChatServiceReference.UserPartialTransportModel obj);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/UnreadMessages")]
        void UnreadMessages(TransportLevel.ChatServiceReference.UnreadMessagesTransportModel obj);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceChannel : LogicLevel.ChatServiceReference.IChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServiceClient : System.ServiceModel.DuplexClientBase<LogicLevel.ChatServiceReference.IChatService>, LogicLevel.ChatServiceReference.IChatService {
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public TransportLevel.ChatServiceReference.LoginResultTransportModel Login(TransportLevel.ChatServiceReference.LoginTransportModel obj) {
            return base.Channel.Login(obj);
        }
        
        public System.Threading.Tasks.Task<TransportLevel.ChatServiceReference.LoginResultTransportModel> LoginAsync(TransportLevel.ChatServiceReference.LoginTransportModel obj) {
            return base.Channel.LoginAsync(obj);
        }
        
        public void Logout(TransportLevel.ChatServiceReference.LogoutTransportModel obj) {
            base.Channel.Logout(obj);
        }
        
        public System.Threading.Tasks.Task LogoutAsync(TransportLevel.ChatServiceReference.LogoutTransportModel obj) {
            return base.Channel.LogoutAsync(obj);
        }
        
        public TransportLevel.ChatServiceReference.RegistrationResultTransportModel Registration(TransportLevel.ChatServiceReference.RegistrationTransportModel obj) {
            return base.Channel.Registration(obj);
        }
        
        public System.Threading.Tasks.Task<TransportLevel.ChatServiceReference.RegistrationResultTransportModel> RegistrationAsync(TransportLevel.ChatServiceReference.RegistrationTransportModel obj) {
            return base.Channel.RegistrationAsync(obj);
        }
        
        public void SendMessage(TransportLevel.ChatServiceReference.MessagePartialTransportModel obj) {
            base.Channel.SendMessage(obj);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(TransportLevel.ChatServiceReference.MessagePartialTransportModel obj) {
            return base.Channel.SendMessageAsync(obj);
        }
    }
}
